#!/bin/bash

set -e

echo "üöÄ Iniciando setup do ambiente de benchmark Go vs C#"

check_docker() {
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n√£o est√° instalado"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose n√£o est√° instalado"
        exit 1
    fi
}

build_analysis_image() {
    echo "üêç Preparando imagem Docker para an√°lise..."
    
    if docker images | grep -q "benchmark_analysis"; then
        echo "‚úÖ Imagem de an√°lise j√° existe"
    else
        echo "üì¶ Buildando imagem de an√°lise..."
        docker build -t benchmark_analysis scripts/analysis/
        echo "‚úÖ Imagem de an√°lise criada"
    fi
}

cleanup_existing() {
    echo "üßπ Parando containers do projeto..."
    docker-compose down -v 2>/dev/null || true
}

start_infrastructure() {
    echo "üê≥ Iniciando todos os servi√ßos..."
    docker-compose up -d --build
    
    echo "‚è≥ Aguardando PostgreSQL ficar pronto..."
    timeout=60
    while ! docker exec benchmark_postgres pg_isready -U benchmark_user -d benchmark > /dev/null 2>&1; do
        if [ $timeout -le 0 ]; then
            echo "‚ùå PostgreSQL n√£o ficou pronto a tempo"
            exit 1
        fi
        echo "    Aguardando PostgreSQL... ($timeout segundos restantes)"
        sleep 2
        timeout=$((timeout-2))
    done
    
    echo "‚úÖ PostgreSQL est√° pronto"
    
    echo "‚è≥ Aguardando aplica√ß√µes ficarem prontas..."
    sleep 10  # Dar tempo para as apps buildarem e iniciarem
    
    # Verificar se as aplica√ß√µes est√£o respondendo
    echo "üîç Verificando aplica√ß√£o Go..."
    go_ready=false
    for i in {1..30}; do
        if curl -s http://localhost:8080/health > /dev/null 2>&1; then
            echo "‚úÖ Aplica√ß√£o Go est√° pronta"
            go_ready=true
            break
        fi
        echo "    Aguardando Go app... (tentativa $i/30)"
        sleep 2
    done
    
    echo "üîç Verificando aplica√ß√£o C# EF..."
    csharp_ef_ready=false
    for i in {1..30}; do
        if curl -s http://localhost:8081/health > /dev/null 2>&1; then
            echo "‚úÖ Aplica√ß√£o C# EF est√° pronta"
            csharp_ef_ready=true
            break
        fi
        echo "    Aguardando C# EF app... (tentativa $i/30)"
        sleep 2
    done
    
    echo "üîç Verificando aplica√ß√£o C# Dapper..."
    csharp_dapper_ready=false
    for i in {1..30}; do
        if curl -s http://localhost:8082/health > /dev/null 2>&1; then
            echo "‚úÖ Aplica√ß√£o C# Dapper est√° pronta"
            csharp_dapper_ready=true
            break
        fi
        echo "    Aguardando C# Dapper app... (tentativa $i/30)"
        sleep 2
    done
    
    if [ "$go_ready" = false ]; then
        echo "‚ö†Ô∏è  Aplica√ß√£o Go n√£o est√° respondendo, verifique logs: docker-compose logs go-app"
    fi
    
    if [ "$csharp_ef_ready" = false ]; then
        echo "‚ö†Ô∏è  Aplica√ß√£o C# EF n√£o est√° respondendo, verifique logs: docker-compose logs csharp-ef-app"
    fi
    
    if [ "$csharp_dapper_ready" = false ]; then
        echo "‚ö†Ô∏è  Aplica√ß√£o C# Dapper n√£o est√° respondendo, verifique logs: docker-compose logs csharp-dapper-app"
    fi
}

verify_services() {
    echo "üîç Verificando containers Docker..."
    
    containers=("benchmark_postgres" "benchmark_prometheus" "benchmark_grafana" "benchmark_go_app" "benchmark_csharp_ef_app" "benchmark_csharp_dapper_app")
    
    for container in "${containers[@]}"; do
        if docker ps --format "table {{.Names}}" | grep -q "$container"; then
            echo "    ‚úÖ $container est√° rodando"
        else
            echo "    ‚ùå $container n√£o est√° rodando"
        fi
    done
}

show_access_info() {
    echo ""
    echo "üéâ Setup conclu√≠do com sucesso!"
    echo ""
    echo "üìä Servi√ßos dispon√≠veis:"
    echo "    ‚Ä¢ Go API:         http://localhost:8080 (/health, /metrics, /api/v1/users)"
    echo "    ‚Ä¢ C# Dapper API:  http://localhost:8082 (/health, /metrics, /api/v1/users)"
    echo "    ‚Ä¢ C# EF API:      http://localhost:8081 (/health, /metrics, /api/v1/users)"
    echo "    ‚Ä¢ PostgreSQL: localhost:5432 (benchmark/benchmark_user/benchmark_pass)"
    echo "    ‚Ä¢ Prometheus: http://localhost:9090"
    echo "    ‚Ä¢ Grafana:    http://localhost:3000 (admin/admin123)"
    echo ""
    echo "üîß Para verificar logs dos servi√ßos:"
    echo "    docker-compose logs -f [go-app|csharp-ef-app|csharp-dapper-app|postgres|prometheus|grafana]"
    echo ""
    echo "üß™ Para executar benchmarks:"
    echo "    ./scripts/run-benchmarks.sh"
    echo ""
    echo "üõë Para parar todos os servi√ßos:"
    echo "    docker-compose down"
}

main() {
    echo "üöÄ Inicializando ambiente de benchmark Go vs C#"
    echo "Started at: $(date)"
    echo ""
    
    check_docker
    build_analysis_image
    cleanup_existing
    start_infrastructure
    verify_services
    show_access_info
}

main "$@"