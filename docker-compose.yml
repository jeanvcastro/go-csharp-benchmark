services:
  postgres:
    image: postgres:16
    container_name: benchmark_postgres
    environment:
      POSTGRES_DB: benchmark
      POSTGRES_USER: benchmark_user
      POSTGRES_PASSWORD: benchmark_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/seed-data.sql:/docker-entrypoint-initdb.d/seed-data.sql
    command: >
      postgres
      -c max_connections=750
      -c shared_buffers=1GB
      -c effective_cache_size=3GB
      -c work_mem=16MB
      -c maintenance_work_mem=256MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=64MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U benchmark_user -d benchmark"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '6.0'
    networks:
      - benchmark_network

  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: benchmark_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - benchmark_network

  grafana:
    image: grafana/grafana:10.2.2
    container_name: benchmark_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - benchmark_network

  go-app:
    build:
      context: ./go-app
      dockerfile: Dockerfile
    container_name: benchmark_go_app
    ports:
      - "8080:8080"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: benchmark_user
      DB_PASSWORD: benchmark_pass
      DB_NAME: benchmark
      SERVER_PORT: 8080
      SERVER_HOST: 0.0.0.0
      DB_MAX_CONNECTIONS: 200
      DB_MAX_IDLE_CONNECTIONS: 20
      DB_CONNECTION_MAX_LIFETIME: 300s
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
    networks:
      - benchmark_network

  csharp-ef-app:
    build:
      context: ./csharp-ef-app
      dockerfile: Dockerfile
    container_name: benchmark_csharp_ef_app
    ports:
      - "8081:8080"
    environment:
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=benchmark;Username=benchmark_user;Password=benchmark_pass;Maximum Pool Size=200;Minimum Pool Size=30;Connection Idle Lifetime=300;Connection Lifetime=1800;Command Timeout=30;Pooling=true;"
      ASPNETCORE_ENVIRONMENT: Production
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
    networks:
      - benchmark_network

  csharp-dapper-app:
    build:
      context: ./csharp-dapper-app  
      dockerfile: Dockerfile
    container_name: benchmark_csharp_dapper_app
    ports:
      - "8082:8080"
    environment:
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=benchmark;Username=benchmark_user;Password=benchmark_pass;Maximum Pool Size=200;Minimum Pool Size=30;Connection Idle Lifetime=300;Connection Lifetime=1800;Command Timeout=30;Pooling=true;"
      ASPNETCORE_ENVIRONMENT: Production
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
    networks:
      - benchmark_network

  analysis:
    build:
      context: ./scripts/analysis
      dockerfile: Dockerfile
    container_name: benchmark_analysis
    volumes:
      - ./results:/results
      - ./results/reports:/reports
    profiles:
      - analysis

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  benchmark_network:
    driver: bridge